name: Solar System Workflow

on:
    workflow_dispatch:
    push:
        branches:
          - main
          - 'feature/*'

env:
    MONGO_URI : 'mongodb+srv://supercluster.d83jj.mongodb.net/superData'
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME}}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD}}
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        strategy:
            matrix:
              nodejs_version: [18,20]
              operating_system: [ubuntu-latest]
              #operating_system: [ubuntu-latest,macos-latest]
              exclude:
                  - nodejs_version: 18
                    operating_system: macos-latest
        runs-on: ${{matrix.operating_system}}
        steps:
        
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{matrix.nodejs_version}}
          uses: actions/setup-node@v3
          with:
            node-version: ${{matrix.nodejs_version}}
        
        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{runner.os}}-nodes-modules-${{ hashFiles('package-lock.json')}}

        - name: Install Dependencies
          run: npm install

        - name: Unit Testing
          id: unit-test-nodejs
          run: npm test
        
        - name: Archive Test Results
          #if: failure() && (steps.unit-test-nodejs.outcome == 'failure' || steps.unit-test-nodejs.outcome == 'success')
          if: always()
          uses: actions/upload-artifact@v4
          with:
            name: Mocha-Test-Result- ${{matrix.nodejs_version}} -  ${{matrix.operating_system}}
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        container: # The steps are running in this container
          image: node:19
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            options:
              --name mongo

        env:
          MONGO_URI: 'mongodb://mongo:27017/superData'
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
        runs-on: ubuntu-latest
        steps:
        
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS Version - 19
        #   uses: actions/setup-node@v3
        #   with:
        #     node-version: 19
        
        - name: Cache NPM dependencies
          uses: actions/cache@v4
          with:
            path: node_modules
            key: ${{runner.os}}-nodes-modules-${{ hashFiles('package-lock.json')}}

        - name: Install Dependencies
          run: npm install

        - name: Check Code Coverage
          continue-on-error: true
          run: npm run coverage
        
        - name: Archive Test Results
          uses: actions/upload-artifact@v4
          with:
            name: Code-Coverage-Result
            path: coverage
            retention-days: 5

    docker:
      name: Containerization
      needs: [unit-testing,code-coverage]
      permissions: # Github token permission to write packages
        packages: write
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@v4
        
        - name: DockerHub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{vars.DOCKERHUB_USERNAME}}
            password: ${{secrets.DOCKERHUB_PASSWORD}}

        - name: GHCR(GithubContainerRegistry) Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io
            username: ${{github.repository_owner}}
            password: ${{secrets.GITHUB_TOKEN}} #by default created by github and live the time the pipeline runs
        
        - name: Docker Build for Testing
          uses: docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

        - name: Docker Image Testing
          run: |
            docker images
            docker run --name solar-system-app -d \
                -p 3000:3000 \
                -e MONGO_URI=$MONGO_URI \
                -e MONGO_USERNAME=$MONGO_USERNAME \
                -e MONGO_PASSWORD=$MONGO_PASSWORD \
                ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}

            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP

            echo Testing Image URL using wget
            wget -q -O - 127.0.0.1:3000/live | grep live

        # - name: Docker Push
        #   uses: docker/build-push-action@v4
        #   with:
        #     context: .
        #     push: true
        #     tags: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}            
        - name: Convert to lowercase
          id: convert_to_lowercase
          run: |
            INPUT_STRING="${{ github.repository_owner }}"
            LOWERCASE_STRING=$(echo "$INPUT_STRING" | tr '[:upper:]' '[:lower:]')
            echo "LOWERCASE_VAR=$LOWERCASE_STRING" >> $GITHUB_OUTPUT

        - name: Docker Registry Push
          uses: docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: | 
              ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}            
              ghcr.io/${{ steps.convert_to_lowercase.outputs.LOWERCASE_VAR }}/solar-system:${{github.sha}}


    dev-deploy:
      needs: docker
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        - name: Install kubectl CLI
          uses: azure/setup-kubectl@v4
          with:
            version: 'v1.26.0'

        - name: Set Kubeconfig file
          uses: azure/k8s-set-context@v3
          with:
            method: kubeconfig
            kubeconfig: ${{secrets.KUBECONFIG}}

        - name: Fetch Kubernetes Cluster Details
          run: |
            kubectl version --short -o yaml
            echo ----------------------------
            kubectl get nodes

        - name: Save Nginx Ingress Controller IP as GITHUB env variable
          run: |
              echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o  jsonpath='{.status.loadBalancer.ingress[0].ip}')" >> $GITHUB_ENV

        - name: Replace token in Manifest files
          uses: cschleiden/replace-tokens@v1
          with:
            tokenPrefix: '${'
            tokenSuffix: '}'
            files: '["kubernetes/development/*.yaml"]'
          env:
            NAMESPACE: ${{vars.NAMESPACE}}
            REPLICAS: ${{vars.REPLICAS}}
            IMAGES: ${{vars.DOCKERHUB_USERNAME}}/solar-system:${{github.sha}}
            INGRESS_IP: ${{env.INGRESS_IP}}

        - name: Check files
          run: |
            cat kubernetes/development/*.yaml

        - name: Create MongoDB secret
          run: |
            kubectl -n ${{vars.NAMESPACE}} create secret generic mongo-db-creds \
            --from-literal=MONGO_URI=${{env.MONGO_URI}} \
            --from-literal=MONGO_USERNAME=${{env.MONGO_USERNAME}} \
            --from-literal=MONGO_URI=${{env.MONGO_PASSWORD}} \
            --save-config \
            --dry-run=client \
            -o yaml | kubectl apply -f

        - name: Deploy to Dev Env
          run: |
            kubectl apply -f kubernetes/development